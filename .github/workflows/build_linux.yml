name: build linux x86, x64, arm32, arm64
on:
  push: {tags:  ['v*']} #  Push events to matching v*, i.e. v1.0, v20.15.10
permissions:
  contents: write

jobs:
  install_thirdparty_build:
    runs-on: ubuntu-20.04 # default batch, powershell
    steps:
    - uses: actions/checkout@v3
    
    - name: check or download thirdparty_build cache
      id: check_thirdparty_build
      uses: actions/cache@v3
      with: 
        path: ./thirdparty
        key: thirdparty_build
    
    - name: download thirdparty_build
      if: steps.check_thirdparty_build.outputs.cache-hit != 'true'
      run: |
        curl -fsSL https://github.com/YuriSizuku/OnscripterYuri/releases/download/v0.6/thirdparty_build.tar.gz -O
        tar xvzf thirdparty_build.tar.gz

  build_linux32:
    runs-on: ubuntu-20.04
    needs: install_thirdparty_build
    steps:
    - uses: actions/checkout@v3
    
    - name: get thirdparty_build cache
      uses: actions/cache@v3
      with: 
        key: thirdparty_build
        path: ./thirdparty
    
    - name: prepare enviroment
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc-multilib g++-multilib
    
    - name: build onsyuri_x86_linux
      run: |
        cd script 
        export SKIP_PORTS=yes && USE_STATIC_PORTS=yes && bash ./local_linux32.sh
    
    - name: prepare release
      run: |
        cd build_linux32 
        mv onsyuri onsyuri_x86_linux
      
    - name: create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./build_linux32/onsyuri_x86_linux"
        allowUpdates: "true"
        token: ${{ secrets.GITHUB_TOKEN }}

  build_linux64:
    runs-on: ubuntu-20.04
    needs: install_thirdparty_build
    steps:
    - uses: actions/checkout@v3
    
    - name: get thirdparty_build cache
      uses: actions/cache@v3
      with: 
        key: thirdparty_build
        path: ./thirdparty
    
    - name: build onsyuri_x64_linux
      run: |
        cd script 
        export SKIP_PORTS=yes && USE_STATIC_PORTS=yes && bash ./local_linux64.sh
    
    - name: prepare release
      run: |
        cd build_linux64 
        mv onsyuri onsyuri_x64_linux
      
    - name: create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./build_linux64/onsyuri_x64_linux"
        allowUpdates: "true"
        token: ${{ secrets.GITHUB_TOKEN }}

  build_linuxa32:
    runs-on: ubuntu-20.04
    needs: install_thirdparty_build
    steps:
    - uses: actions/checkout@v3
    
    - name: get thirdparty_build cache
      uses: actions/cache@v3
      with: 
        key: thirdparty_build
        path: ./thirdparty
    
    - name: prepare enviroment
      run: |
        sudo apt-get update
        sudo apt-get -y install crossbuild-essential-armhf
    
    - name: build onsyuri_arm32_linux
      run: |
        cd script 
        export SKIP_PORTS=yes && bash ./cross_linuxa32.sh
    
    - name: prepare release
      run: |
        cd build_linuxa32 
        mv onsyuri onsyuri_arm32_linux
      
    - name: create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./build_linuxa32/onsyuri_arm32_linux"
        allowUpdates: "true"
        token: ${{ secrets.GITHUB_TOKEN }}

  build_linuxa64:
    runs-on: ubuntu-20.04
    needs: install_thirdparty_build
    steps:
    - uses: actions/checkout@v3
    
    - name: get thirdparty_build cache
      uses: actions/cache@v3
      with: 
        key: thirdparty_build
        path: ./thirdparty
    
    - name: prepare enviroment
      run: |
        sudo apt-get update
        sudo apt-get -y install crossbuild-essential-arm64
    
    - name: build onsyuri_arm64_linux
      run: |
        cd script 
        export SKIP_PORTS=yes && bash ./cross_linuxa64.sh
    
    - name: prepare release
      run: |
        cd build_linuxa64 
        mv onsyuri onsyuri_arm64_linux
      
    - name: create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "./build_linuxa64/onsyuri_arm64_linux"
        allowUpdates: "true"
        token: ${{ secrets.GITHUB_TOKEN }}